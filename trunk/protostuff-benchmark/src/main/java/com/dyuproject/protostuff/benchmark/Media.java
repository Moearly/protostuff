// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from media.proto

package com.dyuproject.protostuff.benchmark;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.IOUtil;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Media implements Externalizable, Message<Media>, Schema<Media>
{
    public enum Player implements com.dyuproject.protostuff.EnumLite<Player>
    {
        JAVA(0),
        FLASH(1);
        
        public final int number;
        
        private Player (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Player valueOf(int number)
        {
            switch(number) 
            {
                case 0: return JAVA;
                case 1: return FLASH;
                default: return null;
            }
        }
    }


    public static Schema<Media> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Media getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Media DEFAULT_INSTANCE = new Media();

    
    private String uri;
    private String title;
    private Integer width;
    private Integer height;
    private String format;
    private Long duration;
    private Long size;
    private Integer bitrate;
    private List<String> person;
    private Player player;
    private String copyright;

    public Media()
    {
    }

    public Media(
        String uri,
        Integer width,
        Integer height,
        String format,
        Long duration,
        Long size,
        Player player
    )
    {
        this();
        this.uri = uri;
        this.width = width;
        this.height = height;
        this.format = format;
        this.duration = duration;
        this.size = size;
        this.player = player;
    }

    // getters and setters

    // uri

    public String getUri()
    {
        return uri;
    }

    public Media setUri(String uri)
    {
        this.uri = uri;
        return this;
    }

    // title

    public String getTitle()
    {
        return title;
    }

    public Media setTitle(String title)
    {
        this.title = title;
        return this;
    }

    // width

    public Integer getWidth()
    {
        return width;
    }

    public Media setWidth(Integer width)
    {
        this.width = width;
        return this;
    }

    // height

    public Integer getHeight()
    {
        return height;
    }

    public Media setHeight(Integer height)
    {
        this.height = height;
        return this;
    }

    // format

    public String getFormat()
    {
        return format;
    }

    public Media setFormat(String format)
    {
        this.format = format;
        return this;
    }

    // duration

    public Long getDuration()
    {
        return duration;
    }

    public Media setDuration(Long duration)
    {
        this.duration = duration;
        return this;
    }

    // size

    public Long getSize()
    {
        return size;
    }

    public Media setSize(Long size)
    {
        this.size = size;
        return this;
    }

    // bitrate

    public Integer getBitrate()
    {
        return bitrate;
    }

    public Media setBitrate(Integer bitrate)
    {
        this.bitrate = bitrate;
        return this;
    }

    // person

    public List<String> getPersonList()
    {
        return person;
    }

    public Media setPersonList(List<String> person)
    {
        this.person = person;
        return this;
    }

    public String getPerson(int index)
    {
        return person == null ? null : person.get(index);
    }

    public int getPersonCount()
    {
        return person == null ? 0 : person.size();
    }

    public Media addPerson(String person)
    {
        if(this.person == null)
            this.person = new ArrayList<String>();
        this.person.add(person);
        return this;
    }

    // player

    public Player getPlayer()
    {
        return player;
    }

    public Media setPlayer(Player player)
    {
        this.player = player;
        return this;
    }

    // copyright

    public String getCopyright()
    {
        return copyright;
    }

    public Media setCopyright(String copyright)
    {
        this.copyright = copyright;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        IOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        IOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Media> cachedSchema()
    {
        return this;
    }

    // schema methods

    public Media newMessage()
    {
        return new Media();
    }

    public Class<Media> typeClass()
    {
        return Media.class;
    }

    public String messageName()
    {
        return Media.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Media.class.getName();
    }

    public boolean isInitialized(Media message)
    {
        return 
            message.uri != null 
            && message.width != null 
            && message.height != null 
            && message.format != null 
            && message.duration != null 
            && message.size != null 
            && message.player != null;
    }

    public void mergeFrom(Input input, Media message) throws IOException
    {
        while(true)
        {
            int number = input.readFieldNumber(this);
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.uri = input.readString();
                    break;
                case 2:
                    message.title = input.readString();
                    break;
                case 3:
                    message.width = input.readInt32();
                    break;
                case 4:
                    message.height = input.readInt32();
                    break;
                case 5:
                    message.format = input.readString();
                    break;
                case 6:
                    message.duration = input.readInt64();
                    break;
                case 7:
                    message.size = input.readInt64();
                    break;
                case 8:
                    message.bitrate = input.readInt32();
                    break;
                case 9:
                    if(message.person == null)
                        message.person = new ArrayList<String>();
                    message.person.add(input.readString());
                    break;
                case 10:
                    message.player = Player.valueOf(input.readEnum());
                    break;
                case 11:
                    message.copyright = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Media message) throws IOException
    {
        if(message.uri == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.uri, false);

        if(message.title != null)
            output.writeString(2, message.title, false);

        if(message.width == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(3, message.width, false);

        if(message.height == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(4, message.height, false);

        if(message.format == null)
            throw new UninitializedMessageException(message);
        output.writeString(5, message.format, false);

        if(message.duration == null)
            throw new UninitializedMessageException(message);
        output.writeInt64(6, message.duration, false);

        if(message.size == null)
            throw new UninitializedMessageException(message);
        output.writeInt64(7, message.size, false);

        if(message.bitrate != null)
            output.writeInt32(8, message.bitrate, false);

        if(message.person != null)
        {
            for(String person : message.person)
            {
                if(person != null)
                    output.writeString(9, person, true);
            }
        }

        if(message.player == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(10, message.player.number, false);

        if(message.copyright != null)
            output.writeString(11, message.copyright, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "uri";
            case 2: return "title";
            case 3: return "width";
            case 4: return "height";
            case 5: return "format";
            case 6: return "duration";
            case 7: return "size";
            case 8: return "bitrate";
            case 9: return "person";
            case 10: return "player";
            case 11: return "copyright";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("uri", 1);
        __fieldMap.put("title", 2);
        __fieldMap.put("width", 3);
        __fieldMap.put("height", 4);
        __fieldMap.put("format", 5);
        __fieldMap.put("duration", 6);
        __fieldMap.put("size", 7);
        __fieldMap.put("bitrate", 8);
        __fieldMap.put("person", 9);
        __fieldMap.put("player", 10);
        __fieldMap.put("copyright", 11);
    }
}
