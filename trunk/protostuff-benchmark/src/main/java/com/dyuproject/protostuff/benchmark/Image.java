// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!

package com.dyuproject.protostuff.benchmark;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.IOUtil;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Image implements Serializable, Message<Image>
{
    public enum Size implements com.dyuproject.protostuff.EnumLite<Size>
    {
        SMALL(0),
        LARGE(1);
        
        public final int number;
        
        private Size (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Size valueOf(int number)
        {
            switch(number) 
            {
                case 0: return SMALL;
                case 1: return LARGE;
                default: return null;
            }
        }
    }

    public static Schema<Image> getSchema()
    {
        return SCHEMA;
    }

    public static Image getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Image DEFAULT_INSTANCE = new Image();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String uri;
    String title;
    Integer width;
    Integer height;
    Size size;

    public Image()
    {
    }

    public Image(
        String uri
    )
    {
        this();
        this.uri = uri;
    }

    // getters and setters

    // uri

    public String getUri()
    {
        return uri;
    }

    public void setUri(String uri)
    {
        this.uri = uri;
    }

    // title

    public String getTitle()
    {
        return title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }

    // width

    public Integer getWidth()
    {
        return width;
    }

    public void setWidth(Integer width)
    {
        this.width = width;
    }

    // height

    public Integer getHeight()
    {
        return height;
    }

    public void setHeight(Integer height)
    {
        this.height = height;
    }

    // size

    public Size getSize()
    {
        return size == null ? Size.SMALL : size;
    }

    public void setSize(Size size)
    {
        this.size = size;
    }

    // java serialization

    private void readObject(ObjectInputStream in) throws IOException
    {
        int length = in.readInt();
        byte[] data = new byte[length];
        for(int offset = 0; length > 0; length -= offset)
            offset = in.read(data, offset, length);
        IOUtil.mergeFrom(data, this);
    }

    private void writeObject(ObjectOutputStream out) throws IOException
    {
        byte[] data = IOUtil.toByteArray(this);
        out.writeInt(data.length);
        out.write(data);
    }

    // message method

    public Schema<Image> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Image> SCHEMA = new Schema<Image>()
    {
        // schema methods

        public Image newMessage()
        {
            return new Image();
        }

        public Class<Image> typeClass()
        {
            return Image.class;
        }

        public boolean isInitialized(Image message)
        {
            return 
                message.uri != null;
        }

        public void mergeFrom(Input input, Image message) throws IOException
        {
            while(true)
            {
                int number = input.readFieldNumber(this);
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.uri = input.readString();
                        break;
                    case 2:
                        message.title = input.readString();
                        break;
                    case 3:
                        message.width = input.readInt32();
                        break;
                    case 4:
                        message.height = input.readInt32();
                        break;
                    case 5:
                        message.size = Size.valueOf(input.readEnum());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Image message) throws IOException
        {
            if(message.uri == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.uri, false);

            if(message.title != null)
                output.writeString(2, message.title, false);

            if(message.width != null)
                output.writeInt32(3, message.width, false);

            if(message.height != null)
                output.writeInt32(4, message.height, false);

            if(message.size != null)
                 output.writeEnum(5, message.size.number, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "uri";
                case 2: return "title";
                case 3: return "width";
                case 4: return "height";
                case 5: return "size";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("uri", 1);
            fieldMap.put("title", 2);
            fieldMap.put("width", 3);
            fieldMap.put("height", 4);
            fieldMap.put("size", 5);
        }
    };
}