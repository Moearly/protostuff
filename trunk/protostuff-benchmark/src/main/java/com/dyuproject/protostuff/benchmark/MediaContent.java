// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!

package com.dyuproject.protostuff.benchmark;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.IOUtil;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Schema;

public final class MediaContent implements Serializable, Message<MediaContent>, Schema<MediaContent>
{
    
    
    private List<Image> image;
    private Media media;

    public MediaContent()
    {
    }

    public MediaContent(
        List<Image> image,
        Media media
    )
    {
        super();
        this.image = image;
        this.media = media;
    }

    // getters and setters

    public List<Image> getImage()
    {
        return image;
    }

    public void setImage(List<Image> image)
    {
        this.image = image;
    }

    public Media getMedia()
    {
        return media;
    }

    public void setMedia(Media media)
    {
        this.media = media;
    }

    // java serialization

    private void readObject(ObjectInputStream in) throws IOException
    {
        int length = in.readInt();
        byte[] data = new byte[length];
        for(int offset = 0; length > 0; length -= offset)
            offset = in.read(data, offset, length);
        IOUtil.mergeFrom(data, this);
    }

    private void writeObject(ObjectOutputStream out) throws IOException
    {
        byte[] data = IOUtil.toByteArray(this);
        out.writeInt(data.length);
        out.write(data);
    }

    // message method

    public Schema<MediaContent> cachedSchema()
    {
        return this;
    }

    // schema methods

    public MediaContent newMessage()
    {
        return new MediaContent();
    }

    public Class<MediaContent> typeClass()
    {
        return MediaContent.class;
    }

    public boolean isInitialized(MediaContent message)
    {
        return true;
    }

    public void mergeFrom(Input input, MediaContent message) throws IOException
    {
        while(true)
        {
            int number = input.readFieldNumber(this);
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.image == null)
                        message.image = new ArrayList<Image>();
                    message.image.add(input.mergeMessage(new Image()));
                    break;

                case 2:
                    if(message.media == null)
                        message.media = new Media();
                    input.mergeMessage(message.media);
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MediaContent message) throws IOException
    {
        if(message.image != null)
        {
            for(Image image : message.image)
            {
                if(image != null)
                    output.writeMessage(1, image, true);
            }
        }

        if(message.media != null)
             output.writeMessage(2, message.media, false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "image";
            case 2: return "media";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("image", 1);
        __fieldMap.put("media", 2);
    }
}