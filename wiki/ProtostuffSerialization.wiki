#summary protostuff binary serialization and deserialization, howto, usage
#labels Featured

The single dependency:
 * protostuff-api - 50kb
 * protostuff-core - 44kb

= java_bean =

Generate code via [http://protostuff.googlecode.com/files/protostuff-compiler-1.0.0.M6-jarjar.jar protostuff-compiler].

{{{foo.proto}}}
{{{
package foo;

option optimize_for = LITE_RUNTIME;
option java_package = "com.example.foo";

message Person {
  required int32 id = 1;
  optional string name = 2;
  optional string motto = 3 [default="When the cat is away, the mouse is alone!"];
  enum Gender {
    MALE = 1;
    FEMALE = 2;
  }
  optional Gender gender = 4;
}
}}}

== Serialization ==
{{{
Person person = new Person(1);
person.setName("John Doe");
person.setGender(Gender.MALE);
}}}

All write operations require a {{{LinkedBuffer}}} as an arg.

It is better to re-use the buffer (application/threadlocal buffer) to avoid buffer allocation everytime you serialize.

Allocating a new buffer:
{{{
LinkedBuffer buffer = LinkedBuffer.allocate(512);
}}}

* writing to {{{java.io.OutputStream}}} *
{{{
OutputStream out;
LinkedBuffer buffer = getApplicationBuffer();
try
{
    int totalBytes = ProtostuffIOUtil.writeTo(out, person, Person.getSchema(), buffer);
}
finally
{
    buffer.clear();
}
}}}

* writing to a {{{LinkedBuffer}}} *
{{{
LinkedBuffer buffer = getApplicationBuffer();
try
{
    int totalBytes = ProtostuffIOUtil.writeTo(buffer, person, Person.getSchema());
    // write the buffer to somewhere else
    
}
finally
{
    // after writing, clear the buffer
    buffer.clear();
}
}}}

* writing to a byte array *
{{{
LinkedBuffer buffer = getApplicationBuffer();
try
{
    byte[] data = ProtostuffIOUtil.toByteArray(person, Person.getSchema());
    // do something with data
}
finally
{
    buffer.clear();
}
}}}

== Deserialization ==

* merging from {{{java.io.InputStream}}}*
{{{
Person person = new Person();
InputStream in;
ProtostuffIOUtil.mergeFrom(in, person, Person.getSchema());
}}}

* merging from a byte array *
{{{
Person person = new Person();
byte[] data;
ProtostuffIOUtil.mergeFrom(data, person, Person.getSchema()); 
}}}