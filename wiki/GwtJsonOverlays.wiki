#labels Featured,gwt,json,overlays
={{{GWT JSON Overlays}}}=

The steps involved in generating the GWT json overlay code are:
 * compile the .proto into a .java file
 * compile the .java file into a .class file
 * jar the compiled classes
 * generate the code via protostuff-codegen-1.0.0.M0-jarjar.jar

=={{{Model.proto}}}==
{{{
package foo;

option optimize_for = LITE_RUNTIME;
option java_package = "com.example.foo.model";
option java_outer_classname = "Model";

message Greet {
  optional int32 id = 1;
  optional string name = 2;
  optional string message = 3;
  enum Status {
    NEW = 0;
    ACKNOWLEDGED = 1;
  }
  optional Status status = 4;
}
}}}

Here's the output:

=={{{Greet.java}}}==
{{{
public final class Greet extends JavaScriptObject {
    
    public static final class Status extends JavaScriptObject {
        
        public static final Status NEW = create("NEW");
        
        public static final Status ACKNOWLEDGED = create("ACKNOWLEDGED");
        
        private static native Status create(String name) /*-{
            return name;
        }-*/;

        protected Status() {}

        public native String name() /*-{
            return this;
        }-*/;
    }
    
    /**
     * Creates a new Greet instance 
     *
     * @return new Greet instance
     */
    public static native Greet create() /*-{
        return {
                        
        };
    }-*/;

    /**
     * Creates a new JsArray<Greet> instance 
     *
     * @return new JsArray<Greet> instance
     */
    public static native JsArray<Greet> createArray() /*-{
        return [];
    }-*/;

    /**
     * Gets a Greet (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return Greet
     */
    public static native Greet get(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Gets a JsArray<Greet> (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return JsArray<Greet> 
     */
    public static native JsArray<Greet> getArray(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Parses a Greet from a json string
     *
     * @param json string to be parsed/evaluated
     * @return Greet 
     */
    public static native Greet parse(String json) /*-{
        return eval("(" + json + ")");
    }-*/;

    /**
     * Parses a JsArray<Greet> from a json string
     *
     * @param json string to be parsed/evaluated
     * @return JsArray<Greet> 
     */
    public static native JsArray<Greet> parseArray(String json) /*-{
        return eval("(" + json + ")");
    }-*/;

    protected Greet() {}
    
    /** id **/
    
    public native int getId() /*-{
        return this["id"];
    }-*/;

    public native void setId(int id) /*-{
        this["id"] = id;
    }-*/;
        
    /** name **/
    
    public native String getName() /*-{
        return this["name"];
    }-*/;

    public native void setName(String name) /*-{
        this["name"] = name;
    }-*/;
        
    /** message **/
    
    public native String getMessage() /*-{
        return this["message"];
    }-*/;

    public native void setMessage(String message) /*-{
        this["message"] = message;
    }-*/;
        
    /** status **/
    
    public native Status getStatus() /*-{
        return this["status"];
    }-*/;

    public native void setStatus(Status status) /*-{
        this["status"] = status;
    }-*/;
        
}
}}}

={{{Code generation via Ant}}}=

=={{{modules.properties}}}==
{{{
modules = foo

foo.fullClassname = com.example.foo.model.Model
foo.outputPackage = com.example.foo.json
foo.outputDir = generated
foo.generator = gwt_json
foo.encoding = UTF-8

}}}

=={{{build.xml}}}==

{{{
<project name="foo" basedir=".">

<target name="protoc">
  <exec executable="protoc">
    <arg value="--java_out=src/main/java" />
    <arg value="src/main/resources/Model.proto" />
  </exec>
</target>

<target name="javac" depends="protoc">
  <javac srcdir="src/main/java" destdir="target/classes" source="1.5" target="1.5" classpath="lib/protobuf-java-2.2.0.jar"/>
</target>

<target name="jar" depends="javac">
  <jar destfile="dist/model-1.0.0.jar" basedir="target/classes"/>
</target>

<target name="codegen" depends="jar">
  <java classname="com.dyuproject.protostuff.codegen.GeneratorMain">
    <arg value="src/main/resources/modules.properties"/>
    <classpath>
      <pathelement location="dist/model-1.0.0.jar"/>
      <pathelement location="lib/protostuff-codegen-1.0.0-jarjar.jar"/>
    </classpath>
  </java>
</target>

</project>
}}}

Execute:
{{{
$ ant codegen
}}}

={{{Code generation via Maven}}}=

Uses *protostuff-maven-plugin* to generate code (Check out the [MavenArchetypes maven archetypes wiki])

2 Modules:

 * =={{{model/pom.xml}}}==
{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <parent>
    <artifactId>foo</artifactId>
    <groupId>com.example.foo</groupId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example.foo</groupId>
  <artifactId>foo-model</artifactId>
  <name>foo :: model</name>
  <packaging>jar</packaging>
  
  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <exec executable="protoc">
                  <arg value="--java_out=src/main/java" />
                  <arg value="src/main/resources/com/example/foo/model/Model.proto" />
                </exec>
              </tasks>
              <sourceRoot>target/generated-sources</sourceRoot>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
  <dependencies>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>
  </dependencies>

</project>
}}}

 * =={{{gwt-model/pom.xml}}}==

{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <parent>
    <artifactId>foo</artifactId>
    <groupId>com.example.foo</groupId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example.foo</groupId>
  <artifactId>foo-gwt-model</artifactId>
  <name>foo :: gwt-model</name>
  <packaging>jar</packaging>

  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <groupId>com.dyuproject.protostuff</groupId>
        <artifactId>protostuff-maven-plugin</artifactId>
        <version>${protostuff.version}</version>
        <configuration>
          <modules>
            <module>
              <fullClassname>com.example.foo.model.Model</fullClassname>
              <outputPackage>com.example.foo.gwt.model</outputPackage>
              <outputDir>src/main/java</outputDir>
              <generator>gwt_json</generator>
              <encoding>UTF-8</encoding>
            </module>
          </modules>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.example.foo</groupId>
            <artifactId>foo-model</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>codegen</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
  <dependencies>
    <dependency>
      <groupId>com.example.foo</groupId>
      <artifactId>foo-model</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dyuproject.protostuff</groupId>
      <artifactId>protostuff-json</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
    </dependency>
  </dependencies>

</project>

}}}

Eexecute:
{{{
$ mvn install
}}}