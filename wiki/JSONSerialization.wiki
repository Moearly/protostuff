#labels json,ser,deser,Featured
={{{JSON ser/deser}}}=

The generated code uses the json api from jackson-core-asl-1.2.1

At runtime, the following should be on the classpath:
 * protobuf-java-2.2.0.jar - 313kb
 * jackson-core-asl-1.2.1.jar - 137kb
 * protostuff-json-1.0.0.jar - 34kb


={{{Usage}}}=

{{{

final ModelJSON json = new ModelJSON ();

public void parseFrom(InputStream in) throws IOException
{
    Greet greet = json.parseFrom(in, Greet.class);
}

public void writeTo(OutputStream out) throws IOException
{
    Greet greet = Greet.newBuilder().setId(1).setName("foo").setMessage("hello").setStatus(Greet.Status.NEW).build();
    json.writeTo(out, greet);
}

}}}

The steps involved in generating the json ser/deser code are:
 * compile the .proto into a .java file
 * compile the .java file into a .class file
 * jar the compild classes
 * generate the code via protostuff-codegen-1.0.0-jarjar.jar

=={{{Model.proto}}}==
{{{
package foo;

option optimize_for = LITE_RUNTIME;
option java_package = "com.example.foo.model";
option java_outer_classname = "Model";

message Greet {
  optional int32 id = 1;
  optional string name = 2;
  optional string message = 3;
  enum Status {
    NEW = 0;
    ACKNOWLEDGED = 1;
  }
  optional Status status = 4;
}
}}}

={{{Via Ant}}}=

=={{{modules.properties}}}==
{{{
modules = json

json.fullClassname = com.example.foo.model.Model
json.outputPackage = com.example.foo.json
json.generator = json
json.encoding = UTF-8
json.outputDir = generated
}}}

=={{{build.xml}}}==

{{{
<project name="foo" basedir=".">

<target name="protoc">
  <exec executable="protoc">
    <arg value="--java_out=src/main/java" />
    <arg value="src/main/resources/Model.proto" />
  </exec>
</target>

<target name="javac" depends="protoc">
  <javac srcdir="src/main/java" destdir="target/classes" source="1.5" target="1.5" classpath="lib/protobuf-java-2.2.0.jar"/>
</target>

<target name="jar" depends="javac">
  <jar destfile="dist/model-1.0.0.jar" basedir="target/classes"/>
</target>

<target name="codegen" depends="jar">
  <java classname="com.dyuproject.protostuff.codegen.GeneratorMain">
    <arg value="src/main/resources/modules.properties"/>
    <classpath>
      <pathelement location="dist/model-1.0.0.jar"/>
      <pathelement location="lib/protostuff-codegen-1.0.0-jarjar.jar"/>
    </classpath>
  </java>
</target>

</project>
}}}

Execute:
{{{
$ ant codegen
}}}

={{{Via Maven}}}=

Uses *protostuff-maven-plugin* to generate code

2 Modules:

 * =={{{model/pom.xml}}}==
{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <parent>
    <artifactId>foo</artifactId>
    <groupId>com.example.foo</groupId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example.foo</groupId>
  <artifactId>foo-model</artifactId>
  <name>foo :: model</name>
  <packaging>jar</packaging>
  
  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <exec executable="protoc">
                  <arg value="--java_out=src/main/java" />
                  <arg value="src/main/resources/com/example/foo/model/Model.proto" />
                </exec>
              </tasks>
              <sourceRoot>target/generated-sources</sourceRoot>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
  <dependencies>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>
  </dependencies>

</project>
}}}

 * =={{{json/pom.xml}}}==

{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <parent>
    <artifactId>foo</artifactId>
    <groupId>com.example.foo</groupId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example.foo</groupId>
  <artifactId>foo-json</artifactId>
  <name>foo :: json</name>
  <packaging>jar</packaging>

  <build>
    <defaultGoal>install</defaultGoal>
    <plugins>
      <plugin>
        <groupId>com.dyuproject.protostuff</groupId>
        <artifactId>protostuff-maven-plugin</artifactId>
        <version>${protostuff.version}</version>
        <configuration>
          <modules>
            <module>
              <fullClassname>com.example.foo.model.Model</fullClassname>
              <outputPackage>com.example.foo.json</outputPackage>
              <outputDir>src/main/java</outputDir>
              <generator>json</generator>
              <encoding>UTF-8</encoding>
            </module>
          </modules>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.example.foo</groupId>
            <artifactId>foo-model</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>codegen</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
  <dependencies>
    <dependency>
      <groupId>com.example.foo</groupId>
      <artifactId>foo-model</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.dyuproject.protostuff</groupId>
      <artifactId>protostuff-json</artifactId>
    </dependency>
  </dependencies>

</project>

}}}

Eexecute:
{{{
$ mvn install
}}}