#summary Writing custom code generators with stringtemplate
#labels Featured

= Generating code via stringtemplate =

Here's a [http://www.antlr.org/wiki/display/ST/StringTemplate+cheat+sheet stringtemplate cheat sheet] for those who are not too familiar with it.

Below is a guide/convention to structure/organize your stg ({{{StringTemplateGroup}}})

The goal is to make it modular (de-centralized) so that your template can easily be extended and maintained.

The "//#message begin" is basically a bookmark so that when the code get's too big, its easy to navigate via your text editor's search for "#message"


{{{
sample.stg
}}}

{{{

// means you extend the base template (inherit its templates for this group to call)
// this mechanism enables us to maximize code re-use
group sample : base;

//#proto begin

proto_block(proto, module, options) ::= <<

// this is for generating code with OuterClassname style

public final class <proto.extraOptions.java_outer_classname> 
{

    // call the enum_block template
    <proto.enumGroups:enum_block(eg=it, module=module, options=options)>

    // call the message block template
    <proto.messages:message_block(message=it, module=module, options=options)>

}

>>

//#message begin

message_block(message, module, options) ::= <<

public static final class <message.name> 
{
    // message contents
    public static final <message.name> INSTANCE = new <message.name>();

    <message:message_static_method_get_instance(message=it, options=options)>
    
    <message:message_constructor(message=it, options=options)>

}

>>

message_static_method_get_instance(message, options) ::= <<
public static <message.name> getInstance() 
{
    return INSTANCE;
}
>>

message_constructor(message, options) ::= <<
public <message.name>()
{

}
>>

//#enum begin

enum_block(eg, module, options) ::= <<

// enum contents

public enum <eg.name> implements com.dyuproject.protostuff.EnumLite\<<eg.name>\> 
{
    <eg.values:{v|<v.name>(<v.number>)}; separator=",\n">;
    
    public final int number;

    <eg:enum_constructor(eg=it, options=options)>

    <eg:enum_method_get_number(eg=it, options=options)>
    
}

>>

enum_constructor(eg, options) ::= <<
private <eg.name> (int number)
{
    this.number = number;
}
>>

enum_method_get_number(eg, options) ::= <<
public int getNumber()
{
    return number;
}
>>

}}}


More to be added ...