#labels Featured
= {{{Compiler Via Ant}}} =

#summary using the proto compiler via ant

={{{Using the proto compiler via Ant}}}=

Currently there are 2 outputs:
 * java_bean
 * gwt_overlay

=={{{Model.proto}}}==
{{{
package foo;

option optimize_for = LITE_RUNTIME;
option java_package = "com.example.foo.model";
option java_outer_classname = "Model";

message Greet {
  optional int32 id = 1;
  optional string name = 2;
  optional string msg = 3;
  enum Status {
    NEW = 0;
    ACKNOWLEDGED = 1;
  }
  optional Status status = 4;
}
}}}

=={{{modules.properties}}}==
{{{
modules = foo

foo.source = Model.proto
#java_bean, gwt_overlay
foo.output = java_bean
foo.outputDir = generated
foo.encoding = UTF-8
foo.options = key:value,generate_field_map,separate_schema
}}}

=={{{build.xml}}}==

{{{
<project name="foo" basedir=".">

<target name="compileproto">
  <java classname="com.dyuproject.protostuff.compiler.CompilerMain">
    <arg value="modules.properties"/>
    <classpath>
      <pathelement location="protostuff-compiler-1.0-SNAPSHOT-jarjar.jar"/>
    </classpath>
  </java>
</target>

</project>
}}}

=={{{Execute:}}}==
{{{
$ ant compileproto
}}}

=={{{Output:}}}==
{{{
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!

package com.example.foo.model;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.IOUtil;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Schema;

public final class Greet implements Serializable, Message<Greet>
{
    public enum Status implements com.dyuproject.protostuff.EnumLite<Status>
    {
        NEW(0),
        ACKNOWLEDGED(1);
        
        public final int number;
        
        private Status (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Status valueOf(int number)
        {
            switch(number) 
            {
                case 0: return NEW;
                case 1: return ACKNOWLEDGED;
                default: return null;
            }
        }
    }

    public static Schema<Greet> getSchema()
    {
        return SCHEMA;
    }

    public static Greet getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Greet DEFAULT_INSTANCE = new Greet();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer id;
    String name;
    String msg;
    Status status;

    public Greet()
    {
    }

    // getters and setters

    // id

    public Integer getId()
    {
        return id;
    }

    public void setId(Integer id)
    {
        this.id = id;
    }

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // msg

    public String getMsg()
    {
        return msg;
    }

    public void setMsg(String msg)
    {
        this.msg = msg;
    }

    // status

    public Status getStatus()
    {
        return status;
    }

    public void setStatus(Status status)
    {
        this.status = status;
    }

    // java serialization

    private void readObject(ObjectInputStream in) throws IOException
    {
        int length = in.readInt();
        byte[] data = new byte[length];
        for(int offset = 0; length > 0; length -= offset)
            offset = in.read(data, offset, length);
        IOUtil.mergeFrom(data, this);
    }

    private void writeObject(ObjectOutputStream out) throws IOException
    {
        byte[] data = IOUtil.toByteArray(this);
        out.writeInt(data.length);
        out.write(data);
    }

    // message method

    public Schema<Greet> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Greet> SCHEMA = new Schema<Greet>()
    {
        // schema methods

        public Greet newMessage()
        {
            return new Greet();
        }

        public Class<Greet> typeClass()
        {
            return Greet.class;
        }

        public boolean isInitialized(Greet message)
        {
            return true;
        }

        public void mergeFrom(Input input, Greet message) throws IOException
        {
            while(true)
            {
                int number = input.readFieldNumber(this);
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readInt32();
                        break;
                    case 2:
                        message.name = input.readString();
                        break;
                    case 3:
                        message.msg = input.readString();
                        break;
                    case 4:
                        message.status = Status.valueOf(input.readEnum());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Greet message) throws IOException
        {
            if(message.id != null)
                output.writeInt32(1, message.id, false);

            if(message.name != null)
                output.writeString(2, message.name, false);

            if(message.msg != null)
                output.writeString(3, message.msg, false);

            if(message.status != null)
                 output.writeEnum(4, message.status.number, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "id";
                case 2: return "name";
                case 3: return "msg";
                case 4: return "status";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("id", 1);
            fieldMap.put("name", 2);
            fieldMap.put("msg", 3);
            fieldMap.put("status", 4);
        }
    };
}
}}}