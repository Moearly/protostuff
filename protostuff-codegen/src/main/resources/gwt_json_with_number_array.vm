// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!

package ${module.getOutputPackage()};

import com.google.gwt.core.client.*;

#set( $name = $model.getModelMeta().getMessageClass().getSimpleName() )
/**
 * A simple wrapper generated from the protobuf message 
 * ${module.getFullClassname()}.${name} 
 */
public final class ${name} extends JavaScriptObject {
    
    // Overlay types always have protected, zero-arg constructors
    protected ${name}() {
    }

    /**
     * Creates a new ${name} instance 
     *
     * @return new ${name} instance
     */
    public static native ${name} create() /*-{
        return {};
    }-*/;

    /**
     * Creates a new JsArray<${name}> instance 
     *
     * @return new JsArray<${name}> instance
     */
    public static native JsArray<${name}> createArray() /*-{
        return [];
    }-*/;

    /**
     * Gets a ${name} (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return ${name}
     */
    public static native ${name} get(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Gets a JsArray<${name}> (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return JsArray<${name}> 
     */
    public static native JsArray<${name}> getArray(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Parses a ${name} from a jsonString
     *
     * @param jsonString to be parsed/evaluated
     * @return ${name} 
     */
    public static native ${name} parse(String jsonString) /*-{
        return eval("(" + jsonString + ")");
    }-*/;

    /**
     * Parses a JsArray<${name}> from a jsonString
     *
     * @param jsonString to be parsed/evaluated
     * @return JsArray<${name}> 
     */
    public static native JsArray<${name}> parseArray(String jsonString) /*-{
        return eval("(" + jsonString + ")");
    }-*/;

    // getters and setters
    #foreach( $p in $model.getProperties() )
    #set( $pm = $p.getPropertyMeta() )
    #set( $pn = $pm.getName() )
    #set( $ppn = $Util.toPascal($pn) )
    #set( $tc = $pm.getTypeClass() )
    #if( $pm.isRepeated() )
    #set( $ctc = $pm.getComponentTypeClass() )
    #if( ${pm.isMessage()} )

    public native JsArray<${ppn}> get${ppn}List() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native ${ppn} get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, ${ppn} ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(${ppn} ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #elseif( ${ctc.getSimpleName()} == "ByteString" )

    public native JsArrayString get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native String get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, String ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(String ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #elseif( ${ctc.isEnum()} )

    public native JsArrayString get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native String get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, String ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(String ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #elseif( ${ctc.getSimpleName()} == "boolean" ) 

    public native JsArrayBoolean get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native boolean get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, boolean ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(boolean ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #elseif( ${ctc.getSimpleName()} == "String" )

    public native JsArrayString get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native String get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, String ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(String ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #elseif( ${ctc.getSimpleName()} == "int" )

    public native JsArrayInteger get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native int get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, int ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(int ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #else

    public native JsArrayNumber get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native int get${ppn}Count() /*-{
        return this["${pn}"].length;
    }-*/;

    public native double get${ppn}(int index) /*-{
        return this["${pn}"][index];
    }-*/;

    public native void set${ppn}(int index, double ${pn}) /*-{
        this["${pn}"][index] = ${pn};
    }-*/;

    public native void clear${ppn}() /*-{
        this["${pn}"] = [];
    }-*/;

    public void add${ppn}(double ${pn}) {
        set${ppn}(get${ppn}Count(), ${pn});
    }
    #end
    #elseif( ${pm.isMessage()} )

    public native ${ppn} get${ppn}() /*-{
        return this["${pn}"];
    }-*/;
    #elseif( ${tc.getSimpleName()} == "ByteString" )

    public native String get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(String ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #elseif( ${tc.isEnum()} )

    public native String get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(String ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #elseif( ${tc.getSimpleName()} == "boolean" ) 

    public native boolean get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(boolean ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #elseif( ${tc.getSimpleName()} == "String" )

    public native String get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(String ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #elseif( ${tc.getSimpleName()} == "int" )

    public native int get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(int ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #else

    public native double get${ppn}() /*-{
        return this["${pn}"];
    }-*/;

    public native void set${ppn}(double ${pn}) /*-{
        this["${pn}"] = ${pn};
    }-*/;
    #end
    #end

}